import{a as v,g as c,h as u}from"./chunk-L5AMQ7ZY.js";import"./chunk-MFN67L7C.js";import"./chunk-5BOMXKNH.js";import"./chunk-NWUTPD36.js";import"./chunk-UJ7MX4VL.js";import{a as D,b as E}from"./chunk-L2NVTMS2.js";import"./chunk-YW7TPMAR.js";import"./chunk-PGKED42N.js";import"./chunk-KSAOBFIR.js";import"./chunk-OJURW5TU.js";import{a as l}from"./chunk-JTGFDHLS.js";import"./chunk-PMGQLREC.js";import"./chunk-W6OF57RJ.js";import"./chunk-RK4XZYBE.js";import"./chunk-NDFIHEIH.js";import"./chunk-LQR5KMRS.js";import"./chunk-HXUMX2S7.js";import"./chunk-CIDV5VJQ.js";import"./chunk-VX55KNI4.js";import{n as S,ta as L}from"./chunk-VGT27A4M.js";import"./chunk-AYCAVTPT.js";import"./chunk-RXNDJ7P3.js";import"./chunk-YM7II27E.js";import"./chunk-CYOQISC6.js";import"./chunk-TKYTZF2K.js";import"./chunk-RY27BWZR.js";import"./chunk-WIWWLEBZ.js";import{Fa as s,Jb as F,Vb as I,aa as g,ea as A}from"./chunk-YT2MPR4E.js";import"./chunk-R4ZXRZL6.js";import"./chunk-LDKM7IQF.js";import"./chunk-6O63U2D6.js";import"./chunk-RIOWPXBZ.js";import"./chunk-BAWLRI3I.js";import"./chunk-USKTQDCY.js";import"./chunk-OSCGYMLH.js";import"./chunk-ADWO6K2C.js";import"./chunk-O337TVCZ.js";import"./chunk-T5ILKGCR.js";import"./chunk-EJP3AYQB.js";import"./chunk-2T657SRL.js";import"./chunk-QJAZEJHH.js";import"./chunk-LCKQ7YKT.js";import"./chunk-ZVYHIM2Y.js";import"./chunk-ME7FEN7O.js";import"./chunk-VBARKITZ.js";import"./chunk-NCANHNXF.js";import{f as y,h as T,m as M,n as p,o as w}from"./chunk-GLD6H5Q5.js";M();w();var o=y(v()),d=y(I());A();L();F();var f=class{constructor(){T(this,"signTransaction",async(t,e,n)=>{e=l(e);let r=await D(e),a=r.getMessageToSign(!1),i=p.Buffer.isBuffer(a)?a.toString("hex"):d.rlp.encode(a).toString("hex"),{type:h,chainId:P}=e,q={path:t.hdPathMap[s],chainId:P,requestId:g().toLowerCase(),signData:i,dataType:h===S.FEE_MARKET?o.KeystoneEthereumSDK.DataType.typedTransaction:o.KeystoneEthereumSDK.DataType.transaction,xfp:t.masterFingerprint},C=await u.openModal(c.showTxParams,{signRequest:q,baseChain:s}),m=p.Buffer.from(C,"hex"),R=m.slice(0,32),b=m.slice(32,64),N=m.slice(64),x=await E(r,{r:R,s:b,v:N});return n?x:{rawTxResult:x}});T(this,"signTypedData",async(t,e)=>{let n=t.hdPathMap[s];if(!["V4","V3"].includes(e.version))throw new Error("this version of typed data signing is no't supported");let a=p.Buffer.from(e.data,"utf-8"),i={path:n,requestId:g().toLowerCase(),signData:a,dataType:o.KeystoneEthereumSDK.DataType.typedData,xfp:t.masterFingerprint};return`0x${await u.openModal(c.showTxParams,{signRequest:i,baseChain:s})}`})}async signPersonalMessage(t,e){let n=t.hdPathMap[s],r=(0,d.stripHexPrefix)(e.data),a={path:n,requestId:g().toLowerCase(),signData:r,dataType:o.KeystoneEthereumSDK.DataType.personalMessage,xfp:t.masterFingerprint};return`0x${await u.openModal(c.showTxParams,{signRequest:a,baseChain:s})}`}},j=new f;export{j as default};

window.inOKXExtension = true;
window.inMiniApp = false;
window.ASSETS_BUILD_TYPE = "publish";

//# sourceMappingURL=ethAdapter-PSD6GTQB.js.map
